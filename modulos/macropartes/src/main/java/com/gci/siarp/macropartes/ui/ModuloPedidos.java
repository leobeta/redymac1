package com.gci.siarp.macropartes.ui;

import static java.lang.Math.toIntExact;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Date;
import java.util.List;

import lombok.extern.log4j.Log4j;

import org.springframework.beans.factory.annotation.Autowired;
import org.vaadin.dialogs.ConfirmDialog;

import ru.xpoft.vaadin.VaadinView;

import com.csvreader.CsvReader;
import com.gci.siarp.api.annotation.SiarpUIComponent;
import com.gci.siarp.api.ui.SiarpSession;
import com.gci.siarp.api.ui.SiarpTheme;
import com.gci.siarp.generales.service.GCIStringToIntegerConverter;
import com.gci.siarp.macropartes.domain.Ciudad;
import com.gci.siarp.macropartes.domain.Pedido;
import com.gci.siarp.macropartes.domain.Permisos;
import com.gci.siarp.macropartes.domain.Proveedor;
import com.gci.siarp.macropartes.domain.Referencia;
import com.gci.siarp.macropartes.domain.SubirArchivo;
import com.gci.siarp.macropartes.service.MacropartesService;
import com.vaadin.annotations.AutoGenerated;
import com.vaadin.data.Property.ValueChangeEvent;
import com.vaadin.data.util.BeanContainer;
import com.vaadin.data.util.BeanItemContainer;
import com.vaadin.navigator.View;
import com.vaadin.navigator.ViewChangeListener.ViewChangeEvent;
import com.vaadin.server.FontAwesome;
import com.vaadin.shared.ui.combobox.FilteringMode;
import com.vaadin.ui.Alignment;
import com.vaadin.ui.Button;
import com.vaadin.ui.Button.ClickEvent;
import com.vaadin.ui.ComboBox;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.GridLayout;
import com.vaadin.ui.HorizontalLayout;
import com.vaadin.ui.Label;
import com.vaadin.ui.Notification;
import com.vaadin.ui.Notification.Type;
import com.vaadin.ui.Panel;
import com.vaadin.ui.Table;
import com.vaadin.ui.TextArea;
import com.vaadin.ui.TextField;
import com.vaadin.ui.UI;
import com.vaadin.ui.Upload;
import com.vaadin.ui.Upload.ChangeEvent;
import com.vaadin.ui.Upload.FinishedEvent;
import com.vaadin.ui.Upload.FinishedListener;
import com.vaadin.ui.VerticalLayout;

@SiarpUIComponent
@VaadinView("macropartes/predidos")
@SuppressWarnings("serial")
@Log4j
public class ModuloPedidos extends CustomComponent implements View {

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	@AutoGenerated
	private VerticalLayout mainLayout;
	@AutoGenerated
	private Panel panel_4;
	@AutoGenerated
	private VerticalLayout verticalLayout_6;
	@AutoGenerated
	private GridLayout gridLayout_5;
	@AutoGenerated
	private Button btnAutorizar;
	@AutoGenerated
	private Panel panel_5;
	@AutoGenerated
	private VerticalLayout verticalLayout_7;
	@AutoGenerated
	private GridLayout gridLayout_3;
	@AutoGenerated
	private Label label_17;
	@AutoGenerated
	private Button btnNoEncontro;
	@AutoGenerated
	private Label label_8;
	@AutoGenerated
	private Button btnDisponible;
	@AutoGenerated
	private Label label_14;
	@AutoGenerated
	private Button btnTransito;
	@AutoGenerated
	private Label label_15;
	@AutoGenerated
	private Button btnAutorizado;
	@AutoGenerated
	private Label label_7;
	@AutoGenerated
	private Button btnPendiente;
	@AutoGenerated
	private TextArea taObservaciones;
	@AutoGenerated
	private Table tblItems;
	@AutoGenerated
	private Panel pItems;
	@AutoGenerated
	private VerticalLayout verticalLayout_5;
	@AutoGenerated
	private GridLayout gridLayout_4;
	@AutoGenerated
	private HorizontalLayout horizontalLayout_2;
	@AutoGenerated
	private Button btnAgregar;
	@AutoGenerated
	private TextField tfSigla;
	@AutoGenerated
	private Label label_13;
	@AutoGenerated
	private TextField tfOrden;
	@AutoGenerated
	private Label label_12;
	@AutoGenerated
	private TextField tfCantidad;
	@AutoGenerated
	private Label label_11;
	@AutoGenerated
	private ComboBox cbCiudad;
	@AutoGenerated
	private Label label_10;
	@AutoGenerated
	private ComboBox cbItem;
	@AutoGenerated
	private Label label_6;
	@AutoGenerated
	private Panel panel_2;
	@AutoGenerated
	private VerticalLayout verticalLayout_4;
	@AutoGenerated
	private GridLayout gridLayout_2;
	@AutoGenerated
	private TextField tfEmail;
	@AutoGenerated
	private Label label_9;
	@AutoGenerated
	private TextField tfDireccion;
	@AutoGenerated
	private Label label_2;
	@AutoGenerated
	private TextField tfCiudad;
	@AutoGenerated
	private Label label_1;
	@AutoGenerated
	private TextField tfTelefonos;
	@AutoGenerated
	private Label label_5;
	@AutoGenerated
	private ComboBox cbRazonSocial;
	@AutoGenerated
	private Label label_4;
	@AutoGenerated
	private TextField tfNit;
	@AutoGenerated
	private Label label_3;
	@AutoGenerated
	private Panel pArchivo;
	@AutoGenerated
	private VerticalLayout verticalLayout_9;
	@AutoGenerated
	private Upload upload;
	@AutoGenerated
	private Panel panel_1;
	@AutoGenerated
	private VerticalLayout verticalLayout_2;
	@AutoGenerated
	private GridLayout gridLayout_1;
	@AutoGenerated
	private Button btnBloques;
	@AutoGenerated
	private Button btnImprimir;
	@AutoGenerated
	private Button btnBorrar;
	@AutoGenerated
	private Button btnModificar;
	@AutoGenerated
	private Button btnConsultar;
	@AutoGenerated
	private Button btnGuardar;
	@AutoGenerated
	private Button btnLimpiar;
	@AutoGenerated
	private Button btnNuevo;
	@AutoGenerated
	private Panel pBusqueda;
	@AutoGenerated
	private VerticalLayout verticalLayout_8;
	@AutoGenerated
	private HorizontalLayout horizontalLayout_1;
	@AutoGenerated
	private Button btnBuscar;
	@AutoGenerated
	private TextField tfBusqueda;
	@AutoGenerated
	private Label label_16;
	@AutoGenerated
	private VerticalLayout verticalLayout_3;
	@AutoGenerated
	private Label lblFechaActual;
	@AutoGenerated
	private TextField tfCodigoPedido;
	@AutoGenerated
	private Label lblCodigoPedido;
	@AutoGenerated
	private Label lblForma;
	@Autowired
	private MacropartesService macropartesService;
	private int codigoPedido;
	private BeanItemContainer<Pedido> bicPedidos;
	private BeanContainer<String, Proveedor> bcIdentificacion;
	private BeanContainer<String, Ciudad> bcCiudad;
	private BeanContainer<Integer, Referencia> bcReferencia;
	private Permisos permisos;
	private String accion = "V"; // V = VACIA - N = NUEVO - M = MODIFICAR
	private SubirArchivo receiver;
	private List<Pedido> lstPedidos;
	private List<Pedido> lstPedidosErroneos;
	private SimpleDateFormat sdf = new SimpleDateFormat("yyyyMMdd_HHmmss");
	private File file;
	private String ruta = "";

	/**
	 * The constructor should first build the main layout, set the composition
	 * root and then do any custom initialization.
	 *
	 * The constructor will not be automatically regenerated by the visual
	 * editor.
	 */
	public ModuloPedidos() {

	}

	@Override
	public void enter(ViewChangeEvent event) {
		buildMainLayout();
		setCompositionRoot(mainLayout);

		style();
		init();
	}

	private void init() {
		permisos = macropartesService.getPermisosUsuario(SiarpSession
				.getUsername());

		codigoPedido = macropartesService.getMaxNumeroPedido("PROGRAMACION") + 1;
		tfCodigoPedido.setValue(String.valueOf(codigoPedido));

		btnNuevo.addClickListener(e -> nuevoPedido(e));
		btnLimpiar.addClickListener(e -> limpiarPedido());
		btnConsultar.addClickListener(e -> consultar(e));
		btnBuscar.addClickListener(e -> consultarPedidos(e));
		btnModificar.addClickListener(e -> modificarPedido(e));
		cbRazonSocial.addValueChangeListener(e -> llenarPanelProveedor(e));
		btnAgregar.addClickListener(e -> adicionarFila(e));
		btnGuardar.addClickListener(e -> guardarPedido(e));
		btnImprimir.addClickListener(e -> imprimirPedido(e));
		btnBorrar.addClickListener(e -> borrarPedido());
		btnBloques.addClickListener(e -> mostrarPanelCargarArchivo(e));
		btnAutorizar.addClickListener(e -> autorizarPedido());

		bicPedidos = new BeanItemContainer<Pedido>(Pedido.class);
		tblItems.setContainerDataSource(bicPedidos);
		// tblItems.setSizeFull();
		// tblItems.setEditable(true);

		Collection<Proveedor> proveedores = macropartesService
				.getAllProveedores();
		bcIdentificacion = new BeanContainer<String, Proveedor>(Proveedor.class);
		bcIdentificacion.setBeanIdProperty("identificacion");
		bcIdentificacion.addAll(proveedores);
		cbRazonSocial.setItemCaptionPropertyId("razonSocial");
		cbRazonSocial.setContainerDataSource(bcIdentificacion);
		cbRazonSocial.setValue("");

		Collection<Ciudad> ciudades = macropartesService.getAllCiudades();
		bcCiudad = new BeanContainer<String, Ciudad>(Ciudad.class);
		bcCiudad.setBeanIdProperty("descripcion");
		bcCiudad.addAll(ciudades);
		cbCiudad.setItemCaptionPropertyId("descripcion");
		cbCiudad.setContainerDataSource(bcCiudad);
		cbCiudad.setValue("");

		Collection<Referencia> referencias = macropartesService
				.getAllReferencias();
		bcReferencia = new BeanContainer<Integer, Referencia>(Referencia.class);
		bcReferencia.setBeanIdProperty("referencia");
		bcReferencia.addAll(referencias);
		cbItem.setItemCaptionPropertyId("referenciaCompuesta");
		cbItem.setContainerDataSource(bcReferencia);
		cbItem.setValue("");
		cbItem.setFilteringMode(FilteringMode.CONTAINS);

		tblItems.addGeneratedColumn("estado", this::estado);
		tblItems.setVisibleColumns("item", "referencia", "nombre", "ciudad",
				"cantidad", "orden", "sigla", "estado");
		tblItems.setColumnHeaders("ITEM", "REFERENCIA", "NOMBRE", "CIUDAD",
				"CANTIDAD", "ORDEN", "SIGLA", "ESTADO");

		comportamientoBotones(1);
		upload.setButtonCaption(null);
	}

	private void mostrarPanelCargarArchivo(ClickEvent e) {
		pArchivo.setVisible(true);

		upload.addChangeListener(e2 -> cargaArchivo(e2));
		// upMasivo.isImmediate();
	}

	private synchronized void cargaArchivo(ChangeEvent e2) {
		String nuevoNombre = "Pedido_Masivo_" + SiarpSession.getUsername()
				+ "_" + sdf.format(new Date()) + ".csv";
		receiver = new SubirArchivo();
		upload.setReceiver(receiver);
		receiver.setRuta(nuevoNombre);
		upload.addSucceededListener(receiver);
		upload.setImmediate(true);

		// upload.addListener(new Upload.SucceededListener() {
		// public void uploadSucceeded(SucceededEvent event) {
		// System.out.println("se acabo ----->        ");
		// leerArchivo(nuevoNombre);
		// upload.setImmediate(false);
		// }
		// });
		upload.submitUpload();
		upload.addFinishedListener(new FinishedListener() {
			@Override
			public void uploadFinished(FinishedEvent event) {
				leerArchivo(nuevoNombre);
				upload.setImmediate(false);
			}
		});

	}

	public synchronized void leerArchivo(String nuevoNombre) {
		CsvReader masivo;
		lstPedidos = new ArrayList<Pedido>();
		boolean encontroReferencia = true;
		try {
			System.err.println(nuevoNombre);
			lstPedidosErroneos = new ArrayList<Pedido>();
			masivo = new CsvReader("D:/siarp_conf/masivos/" + nuevoNombre);
			masivo.setDelimiter(';');
			masivo.readHeaders();
			while (masivo.readRecord()) {
				/*System.out.println("SIGLA " + masivo.get(0) + " CIUDAD "
						+ masivo.get(1) + " ORDEN " + masivo.get(2)
						+ " REFERENCIA " + masivo.get(3) + " DESCRIPCION "
						+ masivo.get(4) + " CANTIDAD " + masivo.get(5)
						+ " ITEM " + masivo.get(6));*/
				Pedido ped = new Pedido();
				Pedido ped2 = new Pedido();

				ped.setSigla(masivo.get("SIGLA"));
				ped.setCiudad(masivo.get("CIUDAD"));
				ped.setOrden(masivo.get("ORDEN DE TRABAJO"));
				ped.setReferencia(masivo.get("REFERENCIA"));
				encontroReferencia = buscarReferencia(masivo.get("REFERENCIA"));
				ped.setNombre(masivo.get("DESCRIPCION"));
				
				if (masivo.get(5) != null) {
					ped.setCantidad(Long.parseLong(masivo.get("CANTIDAD")));
				} else {
					ped.setCantidad(0L);
				}
				if (masivo.get(6) != null) {
					ped.setItem(Long.parseLong(masivo.get("ITEM")));
				} else {
					ped.setItem(0L);
				}
				encontroReferencia = buscarReferencia(masivo.get("REFERENCIA"));
				if (encontroReferencia) {
					ped.setEstado("PENDIENTE");
					lstPedidos.add(ped);
				} else {
					ped.setEstado("NO ENCONTRADA");
					lstPedidosErroneos.add(ped);
				}
			}
			if(lstPedidosErroneos.size() == 0){
				bicPedidos.removeAllItems();
				bicPedidos.addAll(lstPedidos);
				btnGuardar.setEnabled(true);
			} else {
				bicPedidos.removeAllItems();
				bicPedidos.addAll(lstPedidosErroneos);
				btnGuardar.setEnabled(false);
				Notification.show("Atención", "No se puede cargar el archivo porque tiene referecias erroneas.", Type.WARNING_MESSAGE);
			}

		} catch (FileNotFoundException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}

	}

	private boolean buscarReferencia(String referencia) {
		boolean resultado = true;
		for (Pedido p : lstPedidos) {
			if (p.getReferencia().equals(referencia)) {
				resultado = true;
			} else {
				resultado = false;
			}
		}
		return resultado;
	}

	/** AUTORIZAR PEDIDOS */
	private void autorizarPedido() {
		ConfirmDialog.show(UI.getCurrent(),
				"¿Está seguro que desea autorizar el pedido consultado?",
				new ConfirmDialog.Listener() {

					@Override
					public void onClose(ConfirmDialog dialog) {
						if (dialog.isConfirmed()) {
							try {
								macropartesService
										.autorizarPedido(tfCodigoPedido
												.getValue());
								macropartesService
										.autorizarPedidoConsolidado(tfCodigoPedido
												.getValue());
							} catch (Exception e) {
								e.printStackTrace();
							}
							Notification.show("Información",
									"Pedido autorizado correctamente.",
									Type.HUMANIZED_MESSAGE);
							limpiarPedido();
						}
					}
				});
	}

	/** BORRAR PEDIDOS */
	private void borrarPedido() {
		ConfirmDialog.show(UI.getCurrent(),
				"¿Está seguro que desea borrar el pedido consultado?",
				new ConfirmDialog.Listener() {

					@Override
					public void onClose(ConfirmDialog dialog) {
						if (dialog.isConfirmed()) {
							try {
								macropartesService.eliminarPedido(Long
										.parseLong(tfCodigoPedido.getValue()));
								macropartesService
										.eliminarPedidoConsolidado(Long
												.parseLong(tfCodigoPedido
														.getValue()));
							} catch (Exception e) {
								e.printStackTrace();
							}
							Notification.show("Información",
									"Registro eliminado correctamente.",
									Type.HUMANIZED_MESSAGE);
							limpiarPedido();
						}
					}
				});
	}

	/** IMPRIMIR PEDIDO */
	private void imprimirPedido(ClickEvent e) {
		ReportPedidos report = new ReportPedidos(macropartesService,
				Long.parseLong(tfCodigoPedido.getValue()), "F2");
		UI.getCurrent().addWindow(report);
	}

	/** GUARDAR PEDIDO */
	private void guardarPedido(ClickEvent e) {
		if (accion.equals("N")) {
			try {
				validarInsert();
			} catch (Error err) {
				Notification.show("Atención", err.getMessage(),
						Type.WARNING_MESSAGE);
				return;
			}

			List<Pedido> listPedidos = bicPedidos.getItemIds();
			for (Pedido ped : listPedidos) {
				try {
					macropartesService.crearProgramacion(ped.getSigla(),
							ped.getOrden(), ped.getCiudad(),
							ped.getReferencia(), ped.getNombre(),
							ped.getCantidad(), ped.getItem(),
							tfCodigoPedido.getValue(), tfNit.getValue(),
							taObservaciones.getValue(),
							SiarpSession.getUsername());

					Notification.show("Información",
							"Registro guardado correctamente.",
							Type.HUMANIZED_MESSAGE);
				} catch (Exception e2) {
					Notification.show("Atención",
							"No se ha gravado exitosamente.",
							Type.ERROR_MESSAGE);
					e2.printStackTrace();
				}
			}
			comportamientoBotones(1);
			try {
				macropartesService.crearProgramacionConsolidada(Long
						.parseLong(tfCodigoPedido.getValue()));
				macropartesService.actualizarConsecutivoProgramacion(
						Long.parseLong(tfCodigoPedido.getValue()),
						"PROGRAMACION");
				generarReportePedidos();
				codigoPedido = macropartesService
						.getMaxNumeroPedido("PROGRAMACION") + 1;
				tfCodigoPedido.setValue(String.valueOf(codigoPedido));
				limpiarPedido();
			} catch (Exception e2) {
				e2.printStackTrace();
			}
		} else {
			try {
				macropartesService.modificarProgramacion(tfCodigoPedido
						.getValue());
				macropartesService
						.modificarProgramacionConsolidada(tfCodigoPedido
								.getValue());
			} catch (Exception e2) {
				e2.printStackTrace();
			}
			List<Pedido> listPedidos = bicPedidos.getItemIds();
			for (Pedido ped : listPedidos) {
				try {
					macropartesService.crearProgramacion(ped.getSigla(),
							ped.getOrden(), ped.getCiudad(),
							ped.getReferencia(), ped.getNombre(),
							ped.getCantidad(), ped.getItem(),
							tfCodigoPedido.getValue(), tfNit.getValue(),
							taObservaciones.getValue(),
							SiarpSession.getUsername());

					Notification.show("Información",
							"Registro guardado correctamente.",
							Type.HUMANIZED_MESSAGE);
				} catch (Exception e2) {
					Notification.show("Atención",
							"No se ha gravado exitosamente.",
							Type.ERROR_MESSAGE);
					e2.printStackTrace();
				}
			}
			comportamientoBotones(1);
			try {
				macropartesService.crearProgramacionConsolidada(Long
						.parseLong(tfCodigoPedido.getValue()));
				// macropartesService.actualizarConsecutivoProgramacion(Long.parseLong(tfCodigoPedido.getValue()),
				// "PROGRAMACION");
				generarReportePedidos();
				codigoPedido = macropartesService
						.getMaxNumeroPedido("PROGRAMACION") + 1;
				tfCodigoPedido.setValue(String.valueOf(codigoPedido));
				limpiarPedido();
			} catch (Exception e2) {
				e2.printStackTrace();
			}
			System.err.println("ELSE");
		}
	}

	/** GENERAR REPORTES */
	private void generarReportePedidos() {
		ReportPedidos report = new ReportPedidos(macropartesService,
				Long.parseLong(tfCodigoPedido.getValue()), "F1");
		UI.getCurrent().addWindow(report);
	}

	/** VALIDAR INSERT */
	private void validarInsert() {
		if (tfNit.getValue().isEmpty()) {
			// tfNit.setValidationVisible(true);
			throw new Error("Debe escoger un proveedor.");
		}
		if (tblItems.getContainerDataSource().getItemIds().isEmpty()) {
			throw new Error("Campos obligatorios para guardar el pedido.");
		}
	}

	/** MODIFICAR FILA EN TABLA */
	private void modificarFila(Object itemId) {
		tblItems.removeItem(itemId);

		try {
			validaciones();
		} catch (Error error) {
			Notification.show("Atencion", error.getMessage(),
					Type.ERROR_MESSAGE);
			return;
		}
		Pedido ped = new Pedido();
		ped.setItem(Long.parseLong(macropartesService
				.getItemByReferencia(cbItem.getValue().toString())));
		ped.setReferencia(cbItem.getValue().toString());
		ped.setNombre(macropartesService.getNombreById(cbItem.getValue()
				.toString()));
		ped.setCiudad(cbCiudad.getValue().toString());
		ped.setCantidad(Long.parseLong(tfCantidad.getValue()));
		ped.setOrden(tfOrden.getValue());
		ped.setSigla(tfSigla.getValue());
		ped.setEstado("PENDIENTE");
		bicPedidos.addItem(ped);

	}

	/** ADICIONAR FILA EN TABLA */
	private void adicionarFila(ClickEvent e) {
		try {
			validaciones();
		} catch (Error error) {
			Notification.show("Atencion", error.getMessage(),
					Type.ERROR_MESSAGE);
			return;
		}
		Pedido pedido = new Pedido();
		pedido.setItem(Long.parseLong(macropartesService
				.getItemByReferencia(cbItem.getValue().toString())));
		pedido.setReferencia(cbItem.getValue().toString());
		pedido.setNombre(macropartesService.getNombreById(cbItem.getValue()
				.toString()));
		pedido.setCiudad(cbCiudad.getValue().toString());
		pedido.setCantidad(Long.parseLong(tfCantidad.getValue()));
		pedido.setOrden(tfOrden.getValue());
		pedido.setSigla(tfSigla.getValue());
		pedido.setEstado("PENDIENTE");

		bicPedidos.addItem(pedido);
	}

	/** VALIDACIONES */
	private void validaciones() {
		if (cbItem.getValue().equals("") || cbCiudad.getValue().equals("")
				|| tfCantidad.getValue().isEmpty()) {
			String msg = "Campos obligatorios.";
			cbItem.setValidationVisible(true);
			cbCiudad.setValidationVisible(true);
			tfCantidad.setValidationVisible(true);
			throw new Error(msg);
		}

		if (!tfCantidad.isEmpty()) {
			tfCantidad.setConverter(new GCIStringToIntegerConverter());
			tfCantidad.setConversionError("La cantidad debe ser Número.");
		}

	}

	private Object estado(Table source, Object itemId, Object columnId) {
		Pedido pedido = (Pedido) itemId;
		HorizontalLayout hlEstado = new HorizontalLayout();
		hlEstado.setImmediate(true);
		hlEstado.setWidth("-1px");
		hlEstado.setHeight("-1px");
		hlEstado.setMargin(false);
		hlEstado.setSpacing(true);
		Button btnEstado = new Button();
		btnEstado.setImmediate(true);
		if (pedido.getEstado().equals("PENDIENTE")) {
			btnEstado.setCaption("");
			btnEstado.addStyleName(SiarpTheme.BUTTON_WARNING);
		}
		if (pedido.getEstado().equals("AUTORIZADO")) {
			btnEstado.setCaption("");
			btnEstado.addStyleName(SiarpTheme.BUTTON_PRIMARY);
		}
		if (pedido.getEstado().equals("DISPONIBLE")) {
			btnEstado.setCaption("");
			btnEstado.addStyleName(SiarpTheme.BUTTON_FRIENDLY);
		}
		if (pedido.getEstado().equals("TRANSITO")) {
			btnEstado.setCaption("");
			btnEstado.addStyleName(SiarpTheme.BUTTON_DANGER);
		}
		if (pedido.getEstado().equals("NO ENCONTRADA")) {
			btnEstado.setCaption("");
			btnEstado.addStyleName(SiarpTheme.BUTTON_ROYAL);
		}
		btnEstado.setEnabled(false);
		hlEstado.addComponent(btnEstado);
		return hlEstado;
	}

	private Object acciones(Table source, Object itemId, Object columnId) {
		Pedido pedido = (Pedido) itemId;
		HorizontalLayout hlAcciones = new HorizontalLayout();
		hlAcciones.setImmediate(true);
		hlAcciones.setWidth("-1px");
		hlAcciones.setHeight("-1px");
		hlAcciones.setMargin(false);
		hlAcciones.setSpacing(true);
		Button btnEli = new Button();
		Button btnMod = new Button();
		btnEli.setImmediate(true);
		btnEli.setIcon(FontAwesome.TRASH_O);
		btnEli.addStyleName(SiarpTheme.BUTTON_DANGER);
		btnEli.addClickListener(e -> eliminarFila(itemId));
		btnMod.setImmediate(true);
		btnMod.setIcon(FontAwesome.EDIT);
		btnMod.addStyleName(SiarpTheme.BUTTON_PRIMARY);
		btnMod.addClickListener(e -> modificarFila(pedido, itemId));
		hlAcciones.addComponent(btnEli);
		hlAcciones.addComponent(btnMod);
		return hlAcciones;
	}

	private void modificarFila(Pedido pedido, Object itemId) {
		pItems.setEnabled(true);
		horizontalLayout_2.removeComponent(btnAgregar);
		Button btnModif = new Button();
		btnModif.setWidth("-1px");
		btnModif.setHeight("-1px");
		btnModif.setIcon(FontAwesome.EDIT);
		btnModif.addStyleName(SiarpTheme.BUTTON_PRIMARY);
		btnModif.addClickListener(e -> modificarFila(itemId));
		if (horizontalLayout_2.getComponentCount() < 1) {
			horizontalLayout_2.addComponent(btnModif);
		}
		cbItem.select(pedido.getReferencia());
		cbCiudad.select(pedido.getCiudad());
		tfCantidad.setValue(String.valueOf(pedido.getCantidad()));
		if (pedido.getOrden() != null)
			tfOrden.setValue(pedido.getOrden());

		if (pedido.getSigla() != null)
			tfSigla.setValue(pedido.getSigla());
	}

	private void eliminarFila(Object itemId) {
		bicPedidos.removeItem(itemId);
		tblItems.removeItem(itemId);
	}

	private void llenarPanelProveedor(ValueChangeEvent e) {
		if (cbRazonSocial.getValue() != null) {
			Proveedor identificacion = macropartesService.getEmpresasById(e
					.getProperty().getValue().toString());
			cbRazonSocial.select(identificacion.getRazonSocial());
			tfNit.setValue(identificacion.getIdentificacion());
			tfTelefonos.setValue(identificacion.getTelefono());
			tfDireccion.setValue(identificacion.getDireccion());
			tfCiudad.setValue(identificacion.getCiudad());
			tfEmail.setValue(identificacion.getEmail());
		}
	}

	private void modificarPedido(ClickEvent e) {
		accion = "M";
		tblItems.addGeneratedColumn("acciones", this::acciones);
		tblItems.setVisibleColumns("item", "referencia", "nombre", "ciudad",
				"cantidad", "orden", "sigla", "estado", "acciones");
		tblItems.setColumnHeaders("ITEM", "REFERENCIA", "NOMBRE", "CIUDAD",
				"CANTIDAD", "ORDEN", "SIGLA", "ESTADO", "ACCIONES");
		bicPedidos.removeAllItems();
		tblItems.removeAllItems();
		Long idPedido = Long.parseLong(tfCodigoPedido.getValue());
		List<Pedido> listPedidos = macropartesService.getPedidosPorID(idPedido);
		if (listPedidos.size() == 0) {
			Notification.show("Atención",
					"No se encontraron registros asociados.",
					Type.WARNING_MESSAGE);
			btnModificar.setEnabled(false);
			btnLimpiar.setEnabled(true);
		} else {
			bicPedidos.addAll(listPedidos);
			btnLimpiar.setEnabled(true);
			btnModificar.setEnabled(true);
			btnGuardar.setEnabled(true);
		}
	}

	private void consultarPedidos(ClickEvent e) {
		tblItems.removeGeneratedColumn("acciones");
		bicPedidos.removeAllItems();
		int dir = 0;
		Long idPedido = Long.parseLong(tfBusqueda.getValue());
		List<Pedido> listPedidos = macropartesService.getPedidosPorID(idPedido);
		if (listPedidos.size() == 0) {
			Notification.show("Atención",
					"No se encontraron registros asociados.",
					Type.WARNING_MESSAGE);
			btnModificar.setEnabled(false);
			btnLimpiar.setEnabled(true);
		} else {
			tfCodigoPedido.setValue(String.valueOf(idPedido));
			for (Pedido ped : listPedidos) {
				dir = dir + toIntExact(ped.getDir());
			}
			tfNit.setValue(listPedidos.get(0).getNit());
			cbRazonSocial.setValue(listPedidos.get(0).getNit());
			tfTelefonos.setValue(listPedidos.get(0).getTelefono());
			tfCiudad.setValue(listPedidos.get(0).getCiudadnit());
			tfDireccion.setValue(listPedidos.get(0).getDireccion());
			tfEmail.setValue(listPedidos.get(0).getEmail());
			bicPedidos.addAll(listPedidos);
			btnLimpiar.setEnabled(true);
			if (dir == 0) {
				if (permisos.getPrg() == 1) {
					btnModificar.setEnabled(false);
					btnGuardar.setEnabled(false);
					btnBorrar.setEnabled(false);
				}
				if (permisos.getActcant() == 1) {
					btnModificar.setEnabled(true);
					btnGuardar.setEnabled(true);
					btnBorrar.setEnabled(true);
				}
				if (permisos.getInterfas() == 1) {
					btnModificar.setEnabled(true);
					btnGuardar.setEnabled(true);
					btnBorrar.setEnabled(true);
				}

			}

		}
	}

	private void consultar(ClickEvent e) {
		pBusqueda.setVisible(true);
		btnImprimir.setEnabled(true);
	}

	private void limpiarPedido() {
		codigoPedido = macropartesService.getMaxNumeroPedido("PROGRAMACION") + 1;
		tfCodigoPedido.setValue(String.valueOf(codigoPedido));
		tfNit.setValue("");
		cbRazonSocial.setValue(null);
		tfTelefonos.setValue("");
		tfCiudad.setValue("");
		tfDireccion.setValue("");
		tfEmail.setValue("");

		cbItem.select(null);
		cbCiudad.select(null);
		tfCantidad.setValue("0");
		tfOrden.setValue("");
		tfSigla.setValue("");

		tfBusqueda.setValue("");

		bicPedidos.removeAllItems();
		comportamientoBotones(1);
	}

	private void nuevoPedido(ClickEvent e) {
		accion = "N";
		comportamientoBotones(2);
		btnBloques.setEnabled(true);
		cbRazonSocial.setEnabled(true);
		pItems.setEnabled(true);
		taObservaciones.setEnabled(true);
	}

	private void comportamientoBotones(int estado) {
		if (estado == 1) { // estado inicial 1
			if (permisos.getPrg() == 1) {
				btnConsultar.setEnabled(true);
				btnNuevo.setEnabled(false);
				btnLimpiar.setEnabled(false);
				btnGuardar.setEnabled(false);
				btnModificar.setEnabled(false);
				btnBorrar.setEnabled(false);
				btnBloques.setEnabled(false);
				btnImprimir.setEnabled(true);
				cbRazonSocial.setEnabled(false);
				tfNit.setEnabled(false);
				tfTelefonos.setEnabled(false);
				tfDireccion.setEnabled(false);
				tfCiudad.setEnabled(false);
				tfEmail.setEnabled(false);
				pItems.setEnabled(false);
				pArchivo.setVisible(false);
				pBusqueda.setVisible(false);
				btnAutorizar.setEnabled(false);
			}
			if (permisos.getActcant() == 1) {
				btnConsultar.setEnabled(true);
				btnNuevo.setEnabled(true);
				btnLimpiar.setEnabled(false);
				btnGuardar.setEnabled(false);
				btnModificar.setEnabled(false);
				btnBorrar.setEnabled(false);
				btnBloques.setEnabled(false);
				btnImprimir.setEnabled(true);
				cbRazonSocial.setEnabled(false);
				tfNit.setEnabled(false);
				tfTelefonos.setEnabled(false);
				tfDireccion.setEnabled(false);
				tfCiudad.setEnabled(false);
				tfEmail.setEnabled(false);
				pItems.setEnabled(false);
				pArchivo.setVisible(false);
				pBusqueda.setVisible(false);
				btnAutorizar.setEnabled(false);
			}
			if (permisos.getInterfas() == 1) {
				btnConsultar.setEnabled(true);
				btnNuevo.setEnabled(true);
				btnLimpiar.setEnabled(false);
				btnGuardar.setEnabled(false);
				btnModificar.setEnabled(false);
				btnBorrar.setEnabled(false);
				btnBloques.setEnabled(false);
				btnImprimir.setEnabled(true);
				cbRazonSocial.setEnabled(false);
				tfNit.setEnabled(false);
				tfTelefonos.setEnabled(false);
				tfDireccion.setEnabled(false);
				tfCiudad.setEnabled(false);
				tfEmail.setEnabled(false);
				pItems.setEnabled(false);
				pArchivo.setVisible(false);
				pBusqueda.setVisible(false);
				btnAutorizar.setEnabled(true);
			}

		}

		if (estado == 2) {
			btnNuevo.setEnabled(false);
			btnLimpiar.setEnabled(true);
			btnGuardar.setEnabled(true);
			btnConsultar.setEnabled(false);
			btnModificar.setEnabled(false);
			btnBorrar.setEnabled(false);
			btnImprimir.setEnabled(false);
			pBusqueda.setVisible(false);
			cbRazonSocial.setEnabled(false);
			tfNit.setEnabled(false);
			tfTelefonos.setEnabled(false);
			tfDireccion.setEnabled(false);
			tfCiudad.setEnabled(false);
			tfEmail.setEnabled(false);
			pItems.setEnabled(false);
		}
	}

	private void style() {
		lblForma.addStyleName(SiarpTheme.TITULO2);
		btnNuevo.setIcon(FontAwesome.FILE_O);
		btnNuevo.addStyleName(SiarpTheme.BUTTON_FRIENDLY);
		btnLimpiar.setIcon(FontAwesome.REFRESH);
		btnLimpiar.addStyleName(SiarpTheme.BUTTON_FRIENDLY);
		btnGuardar.setIcon(FontAwesome.SAVE);
		btnGuardar.addStyleName(SiarpTheme.BUTTON_FRIENDLY);
		btnConsultar.setIcon(FontAwesome.SEARCH);
		btnConsultar.addStyleName(SiarpTheme.BUTTON_FRIENDLY);
		btnModificar.setIcon(FontAwesome.EDIT);
		btnModificar.addStyleName(SiarpTheme.BUTTON_FRIENDLY);
		btnBorrar.setIcon(FontAwesome.TRASH_O);
		btnBorrar.addStyleName(SiarpTheme.BUTTON_FRIENDLY);
		btnImprimir.setIcon(FontAwesome.PRINT);
		btnImprimir.addStyleName(SiarpTheme.BUTTON_FRIENDLY);
		btnBloques.setIcon(FontAwesome.FILES_O);
		btnBloques.addStyleName(SiarpTheme.BUTTON_FRIENDLY);
		btnBuscar.setIcon(FontAwesome.SEARCH_PLUS);
		btnBuscar.addStyleName(SiarpTheme.BUTTON_FRIENDLY);
		btnAutorizar.setIcon(FontAwesome.THUMBS_O_UP);
		btnAutorizar.addStyleName(SiarpTheme.BUTTON_FRIENDLY);

		gridLayout_2.setColumnExpandRatio(3, 0.5f);
		gridLayout_2.setColumnExpandRatio(5, 0.5f);

		SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
		Date fActual = new Date();
		lblFechaActual.setValue(sdf.format(fActual));
		lblFechaActual.addStyleName(SiarpTheme.LABEL_BOLD);
		lblCodigoPedido.addStyleName(SiarpTheme.LABEL_BOLD);

		panel_1.addStyleName(SiarpTheme.PANEL_BORDERLESS);
		panel_2.addStyleName(SiarpTheme.PANEL_BORDERLESS);
		pItems.addStyleName(SiarpTheme.PANEL_BORDERLESS);
		panel_4.addStyleName(SiarpTheme.PANEL_BORDERLESS);

		btnAgregar.setIcon(FontAwesome.PLUS);
		btnAgregar.addStyleName(SiarpTheme.BUTTON_FRIENDLY);

		pBusqueda.addStyleName(SiarpTheme.PANEL_BORDERLESS);
		tfCodigoPedido.addStyleName(SiarpTheme.TEXT_FIELD_MASIVOML_ROJO);
		tfCodigoPedido.setEnabled(false);
		cbRazonSocial.setEnabled(false);
		tfNit.setEnabled(false);
		tfTelefonos.setEnabled(false);
		tfDireccion.setEnabled(false);
		tfCiudad.setEnabled(false);
		tfEmail.setEnabled(false);
		pItems.setEnabled(false);
		taObservaciones.setEnabled(false);

		pArchivo.addStyleName(SiarpTheme.PANEL_HEADER_GREEN);
		pArchivo.setVisible(false);

		btnPendiente.addStyleName(SiarpTheme.BUTTON_WARNING);
		btnAutorizado.addStyleName(SiarpTheme.BUTTON_PRIMARY);
		btnTransito.addStyleName(SiarpTheme.BUTTON_DANGER);
		btnDisponible.addStyleName(SiarpTheme.BUTTON_FRIENDLY);
		btnNoEncontro.addStyleName(SiarpTheme.BUTTON_ROYAL);

		tblItems.addStyleName(SiarpTheme.TABLE_GREEN_HEADER);
	}

	@AutoGenerated
	private VerticalLayout buildMainLayout() {
		// common part: create layout
		mainLayout = new VerticalLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("100%");
		mainLayout.setHeight("-1px");
		mainLayout.setMargin(false);
		mainLayout.setSpacing(true);
		
		// top-level component properties
		setWidth("100.0%");
		setHeight("-1px");
		
		// lblForma
		lblForma = new Label();
		lblForma.setImmediate(false);
		lblForma.setWidth("-1px");
		lblForma.setHeight("-1px");
		lblForma.setValue("Pedidos");
		mainLayout.addComponent(lblForma);
		
		// panel_1
		panel_1 = buildPanel_1();
		mainLayout.addComponent(panel_1);
		
		// pArchivo
		pArchivo = buildPArchivo();
		mainLayout.addComponent(pArchivo);
		
		// panel_2
		panel_2 = buildPanel_2();
		mainLayout.addComponent(panel_2);
		
		// pItems
		pItems = buildPItems();
		mainLayout.addComponent(pItems);
		
		// tblItems
		tblItems = new Table();
		tblItems.setImmediate(true);
		tblItems.setWidth("100.0%");
		tblItems.setHeight("250px");
		mainLayout.addComponent(tblItems);
		
		// panel_4
		panel_4 = buildPanel_4();
		mainLayout.addComponent(panel_4);
		
		return mainLayout;
	}

	@AutoGenerated
	private Panel buildPanel_1() {
		// common part: create layout
		panel_1 = new Panel();
		panel_1.setImmediate(false);
		panel_1.setWidth("100.0%");
		panel_1.setHeight("-1px");
		
		// verticalLayout_2
		verticalLayout_2 = buildVerticalLayout_2();
		panel_1.setContent(verticalLayout_2);
		
		return panel_1;
	}

	@AutoGenerated
	private VerticalLayout buildVerticalLayout_2() {
		// common part: create layout
		verticalLayout_2 = new VerticalLayout();
		verticalLayout_2.setImmediate(false);
		verticalLayout_2.setWidth("100.0%");
		verticalLayout_2.setHeight("100.0%");
		verticalLayout_2.setMargin(false);
		verticalLayout_2.setSpacing(true);
		
		// gridLayout_1
		gridLayout_1 = buildGridLayout_1();
		verticalLayout_2.addComponent(gridLayout_1);
		
		return verticalLayout_2;
	}

	@AutoGenerated
	private GridLayout buildGridLayout_1() {
		// common part: create layout
		gridLayout_1 = new GridLayout();
		gridLayout_1.setImmediate(false);
		gridLayout_1.setWidth("100.0%");
		gridLayout_1.setHeight("-1px");
		gridLayout_1.setMargin(false);
		gridLayout_1.setSpacing(true);
		gridLayout_1.setColumns(14);
		
		// verticalLayout_3
		verticalLayout_3 = buildVerticalLayout_3();
		gridLayout_1.addComponent(verticalLayout_3, 0, 0);
		
		// pBusqueda
		pBusqueda = buildPBusqueda();
		gridLayout_1.addComponent(pBusqueda, 2, 0);
		gridLayout_1.setComponentAlignment(pBusqueda, new Alignment(48));
		
		// btnNuevo
		btnNuevo = new Button();
		btnNuevo.setImmediate(true);
		btnNuevo.setDescription("Nuevo");
		btnNuevo.setWidth("-1px");
		btnNuevo.setHeight("-1px");
		gridLayout_1.addComponent(btnNuevo, 6, 0);
		gridLayout_1.setComponentAlignment(btnNuevo, new Alignment(48));
		
		// btnLimpiar
		btnLimpiar = new Button();
		btnLimpiar.setImmediate(true);
		btnLimpiar.setDescription("Limpiar");
		btnLimpiar.setWidth("-1px");
		btnLimpiar.setHeight("-1px");
		gridLayout_1.addComponent(btnLimpiar, 7, 0);
		gridLayout_1.setComponentAlignment(btnLimpiar, new Alignment(48));
		
		// btnGuardar
		btnGuardar = new Button();
		btnGuardar.setImmediate(true);
		btnGuardar.setDescription("Guardar");
		btnGuardar.setWidth("-1px");
		btnGuardar.setHeight("-1px");
		gridLayout_1.addComponent(btnGuardar, 8, 0);
		gridLayout_1.setComponentAlignment(btnGuardar, new Alignment(48));
		
		// btnConsultar
		btnConsultar = new Button();
		btnConsultar.setImmediate(true);
		btnConsultar.setDescription("Consultar");
		btnConsultar.setWidth("-1px");
		btnConsultar.setHeight("-1px");
		gridLayout_1.addComponent(btnConsultar, 9, 0);
		gridLayout_1.setComponentAlignment(btnConsultar, new Alignment(48));
		
		// btnModificar
		btnModificar = new Button();
		btnModificar.setImmediate(true);
		btnModificar.setDescription("Modificar");
		btnModificar.setWidth("-1px");
		btnModificar.setHeight("-1px");
		gridLayout_1.addComponent(btnModificar, 10, 0);
		gridLayout_1.setComponentAlignment(btnModificar, new Alignment(48));
		
		// btnBorrar
		btnBorrar = new Button();
		btnBorrar.setImmediate(true);
		btnBorrar.setDescription("Borrar");
		btnBorrar.setWidth("-1px");
		btnBorrar.setHeight("-1px");
		gridLayout_1.addComponent(btnBorrar, 11, 0);
		gridLayout_1.setComponentAlignment(btnBorrar, new Alignment(48));
		
		// btnImprimir
		btnImprimir = new Button();
		btnImprimir.setImmediate(true);
		btnImprimir.setDescription("Imprimir");
		btnImprimir.setWidth("-1px");
		btnImprimir.setHeight("-1px");
		gridLayout_1.addComponent(btnImprimir, 12, 0);
		gridLayout_1.setComponentAlignment(btnImprimir, new Alignment(48));
		
		// btnBloques
		btnBloques = new Button();
		btnBloques.setImmediate(true);
		btnBloques.setDescription("Bloques");
		btnBloques.setWidth("-1px");
		btnBloques.setHeight("-1px");
		gridLayout_1.addComponent(btnBloques, 13, 0);
		gridLayout_1.setComponentAlignment(btnBloques, new Alignment(48));
		
		return gridLayout_1;
	}

	@AutoGenerated
	private VerticalLayout buildVerticalLayout_3() {
		// common part: create layout
		verticalLayout_3 = new VerticalLayout();
		verticalLayout_3.setImmediate(false);
		verticalLayout_3.setWidth("-1px");
		verticalLayout_3.setHeight("-1px");
		verticalLayout_3.setMargin(false);
		
		// lblCodigoPedido
		lblCodigoPedido = new Label();
		lblCodigoPedido.setImmediate(false);
		lblCodigoPedido.setWidth("-1px");
		lblCodigoPedido.setHeight("-1px");
		lblCodigoPedido.setValue("CODIGO DE PEDIDO");
		verticalLayout_3.addComponent(lblCodigoPedido);
		verticalLayout_3.setComponentAlignment(lblCodigoPedido, new Alignment(
				20));
		
		// tfCodigoPedido
		tfCodigoPedido = new TextField();
		tfCodigoPedido.setImmediate(true);
		tfCodigoPedido.setWidth("-1px");
		tfCodigoPedido.setHeight("-1px");
		verticalLayout_3.addComponent(tfCodigoPedido);
		
		// lblFechaActual
		lblFechaActual = new Label();
		lblFechaActual.setImmediate(true);
		lblFechaActual.setWidth("-1px");
		lblFechaActual.setHeight("-1px");
		lblFechaActual.setValue("Label");
		verticalLayout_3.addComponent(lblFechaActual);
		verticalLayout_3.setComponentAlignment(lblFechaActual,
				new Alignment(20));
		
		return verticalLayout_3;
	}

	@AutoGenerated
	private Panel buildPBusqueda() {
		// common part: create layout
		pBusqueda = new Panel();
		pBusqueda.setImmediate(false);
		pBusqueda.setWidth("-1px");
		pBusqueda.setHeight("-1px");
		
		// verticalLayout_8
		verticalLayout_8 = buildVerticalLayout_8();
		pBusqueda.setContent(verticalLayout_8);
		
		return pBusqueda;
	}

	@AutoGenerated
	private VerticalLayout buildVerticalLayout_8() {
		// common part: create layout
		verticalLayout_8 = new VerticalLayout();
		verticalLayout_8.setImmediate(false);
		verticalLayout_8.setWidth("100.0%");
		verticalLayout_8.setHeight("100.0%");
		verticalLayout_8.setMargin(false);
		
		// horizontalLayout_1
		horizontalLayout_1 = buildHorizontalLayout_1();
		verticalLayout_8.addComponent(horizontalLayout_1);
		
		return verticalLayout_8;
	}

	@AutoGenerated
	private HorizontalLayout buildHorizontalLayout_1() {
		// common part: create layout
		horizontalLayout_1 = new HorizontalLayout();
		horizontalLayout_1.setImmediate(false);
		horizontalLayout_1.setWidth("-1px");
		horizontalLayout_1.setHeight("-1px");
		horizontalLayout_1.setMargin(false);
		horizontalLayout_1.setSpacing(true);
		
		// label_16
		label_16 = new Label();
		label_16.setImmediate(false);
		label_16.setWidth("-1px");
		label_16.setHeight("-1px");
		label_16.setValue("PE");
		horizontalLayout_1.addComponent(label_16);
		horizontalLayout_1.setComponentAlignment(label_16, new Alignment(10));
		
		// tfBusqueda
		tfBusqueda = new TextField();
		tfBusqueda.setCaption("Criterio Búsqueda");
		tfBusqueda.setImmediate(false);
		tfBusqueda.setWidth("50px");
		tfBusqueda.setHeight("-1px");
		horizontalLayout_1.addComponent(tfBusqueda);
		
		// btnBuscar
		btnBuscar = new Button();
		btnBuscar.setImmediate(true);
		btnBuscar.setWidth("-1px");
		btnBuscar.setHeight("-1px");
		horizontalLayout_1.addComponent(btnBuscar);
		horizontalLayout_1.setComponentAlignment(btnBuscar, new Alignment(9));
		
		return horizontalLayout_1;
	}

	@AutoGenerated
	private Panel buildPArchivo() {
		// common part: create layout
		pArchivo = new Panel();
		pArchivo.setCaption("Cargar Archivo");
		pArchivo.setImmediate(false);
		pArchivo.setWidth("100.0%");
		pArchivo.setHeight("-1px");
		
		// verticalLayout_9
		verticalLayout_9 = buildVerticalLayout_9();
		pArchivo.setContent(verticalLayout_9);
		
		return pArchivo;
	}

	@AutoGenerated
	private VerticalLayout buildVerticalLayout_9() {
		// common part: create layout
		verticalLayout_9 = new VerticalLayout();
		verticalLayout_9.setImmediate(false);
		verticalLayout_9.setWidth("100.0%");
		verticalLayout_9.setHeight("100.0%");
		verticalLayout_9.setMargin(true);
		
		// upload
		upload = new Upload();
		upload.setImmediate(false);
		upload.setWidth("100.0%");
		upload.setHeight("-1px");
		verticalLayout_9.addComponent(upload);
		
		return verticalLayout_9;
	}

	@AutoGenerated
	private Panel buildPanel_2() {
		// common part: create layout
		panel_2 = new Panel();
		panel_2.setImmediate(false);
		panel_2.setWidth("100.0%");
		panel_2.setHeight("-1px");
		
		// verticalLayout_4
		verticalLayout_4 = buildVerticalLayout_4();
		panel_2.setContent(verticalLayout_4);
		
		return panel_2;
	}

	@AutoGenerated
	private VerticalLayout buildVerticalLayout_4() {
		// common part: create layout
		verticalLayout_4 = new VerticalLayout();
		verticalLayout_4.setImmediate(false);
		verticalLayout_4.setWidth("100.0%");
		verticalLayout_4.setHeight("100.0%");
		verticalLayout_4.setMargin(true);
		verticalLayout_4.setSpacing(true);
		
		// gridLayout_2
		gridLayout_2 = buildGridLayout_2();
		verticalLayout_4.addComponent(gridLayout_2);
		
		return verticalLayout_4;
	}

	@AutoGenerated
	private GridLayout buildGridLayout_2() {
		// common part: create layout
		gridLayout_2 = new GridLayout();
		gridLayout_2.setImmediate(false);
		gridLayout_2.setWidth("100.0%");
		gridLayout_2.setHeight("-1px");
		gridLayout_2.setMargin(false);
		gridLayout_2.setSpacing(true);
		gridLayout_2.setColumns(6);
		gridLayout_2.setRows(2);
		
		// label_3
		label_3 = new Label();
		label_3.setImmediate(false);
		label_3.setWidth("-1px");
		label_3.setHeight("-1px");
		label_3.setValue("Cedula / NIT");
		gridLayout_2.addComponent(label_3, 0, 0);
		gridLayout_2.setComponentAlignment(label_3, new Alignment(34));
		
		// tfNit
		tfNit = new TextField();
		tfNit.setImmediate(true);
		tfNit.setWidth("-1px");
		tfNit.setHeight("-1px");
		gridLayout_2.addComponent(tfNit, 1, 0);
		
		// label_4
		label_4 = new Label();
		label_4.setImmediate(false);
		label_4.setWidth("-1px");
		label_4.setHeight("-1px");
		label_4.setValue("Nombre");
		gridLayout_2.addComponent(label_4, 2, 0);
		gridLayout_2.setComponentAlignment(label_4, new Alignment(34));
		
		// cbRazonSocial
		cbRazonSocial = new ComboBox();
		cbRazonSocial.setImmediate(true);
		cbRazonSocial.setWidth("90.0%");
		cbRazonSocial.setHeight("-1px");
		gridLayout_2.addComponent(cbRazonSocial, 3, 0);
		
		// label_5
		label_5 = new Label();
		label_5.setImmediate(false);
		label_5.setWidth("-1px");
		label_5.setHeight("-1px");
		label_5.setValue("Teléfonos");
		gridLayout_2.addComponent(label_5, 4, 0);
		gridLayout_2.setComponentAlignment(label_5, new Alignment(34));
		
		// tfTelefonos
		tfTelefonos = new TextField();
		tfTelefonos.setImmediate(true);
		tfTelefonos.setWidth("90.0%");
		tfTelefonos.setHeight("-1px");
		gridLayout_2.addComponent(tfTelefonos, 5, 0);
		gridLayout_2.setComponentAlignment(tfTelefonos, new Alignment(33));
		
		// label_1
		label_1 = new Label();
		label_1.setImmediate(false);
		label_1.setWidth("-1px");
		label_1.setHeight("-1px");
		label_1.setValue("Ciudad");
		gridLayout_2.addComponent(label_1, 0, 1);
		gridLayout_2.setComponentAlignment(label_1, new Alignment(34));
		
		// tfCiudad
		tfCiudad = new TextField();
		tfCiudad.setImmediate(true);
		tfCiudad.setWidth("-1px");
		tfCiudad.setHeight("-1px");
		gridLayout_2.addComponent(tfCiudad, 1, 1);
		
		// label_2
		label_2 = new Label();
		label_2.setImmediate(false);
		label_2.setWidth("-1px");
		label_2.setHeight("-1px");
		label_2.setValue("Dirección");
		gridLayout_2.addComponent(label_2, 2, 1);
		gridLayout_2.setComponentAlignment(label_2, new Alignment(34));
		
		// tfDireccion
		tfDireccion = new TextField();
		tfDireccion.setImmediate(true);
		tfDireccion.setWidth("90.0%");
		tfDireccion.setHeight("-1px");
		gridLayout_2.addComponent(tfDireccion, 3, 1);
		
		// label_9
		label_9 = new Label();
		label_9.setImmediate(false);
		label_9.setWidth("-1px");
		label_9.setHeight("-1px");
		label_9.setValue("E-Mail");
		gridLayout_2.addComponent(label_9, 4, 1);
		gridLayout_2.setComponentAlignment(label_9, new Alignment(34));
		
		// tfEmail
		tfEmail = new TextField();
		tfEmail.setImmediate(true);
		tfEmail.setWidth("90.0%");
		tfEmail.setHeight("-1px");
		gridLayout_2.addComponent(tfEmail, 5, 1);
		
		return gridLayout_2;
	}

	@AutoGenerated
	private Panel buildPItems() {
		// common part: create layout
		pItems = new Panel();
		pItems.setImmediate(false);
		pItems.setWidth("100.0%");
		pItems.setHeight("-1px");
		
		// verticalLayout_5
		verticalLayout_5 = buildVerticalLayout_5();
		pItems.setContent(verticalLayout_5);
		
		return pItems;
	}

	@AutoGenerated
	private VerticalLayout buildVerticalLayout_5() {
		// common part: create layout
		verticalLayout_5 = new VerticalLayout();
		verticalLayout_5.setImmediate(false);
		verticalLayout_5.setWidth("100.0%");
		verticalLayout_5.setHeight("100.0%");
		verticalLayout_5.setMargin(true);
		verticalLayout_5.setSpacing(true);
		
		// gridLayout_4
		gridLayout_4 = buildGridLayout_4();
		verticalLayout_5.addComponent(gridLayout_4);
		
		return verticalLayout_5;
	}

	@AutoGenerated
	private GridLayout buildGridLayout_4() {
		// common part: create layout
		gridLayout_4 = new GridLayout();
		gridLayout_4.setImmediate(false);
		gridLayout_4.setWidth("100.0%");
		gridLayout_4.setHeight("-1px");
		gridLayout_4.setMargin(false);
		gridLayout_4.setSpacing(true);
		gridLayout_4.setColumns(11);
		
		// label_6
		label_6 = new Label();
		label_6.setImmediate(false);
		label_6.setWidth("-1px");
		label_6.setHeight("-1px");
		label_6.setValue("Item");
		gridLayout_4.addComponent(label_6, 0, 0);
		gridLayout_4.setComponentAlignment(label_6, new Alignment(34));
		
		// cbItem
		cbItem = new ComboBox();
		cbItem.setImmediate(false);
		cbItem.setWidth("-1px");
		cbItem.setHeight("-1px");
		gridLayout_4.addComponent(cbItem, 1, 0);
		gridLayout_4.setComponentAlignment(cbItem, new Alignment(33));
		
		// label_10
		label_10 = new Label();
		label_10.setImmediate(false);
		label_10.setWidth("-1px");
		label_10.setHeight("-1px");
		label_10.setValue("Ciudad");
		gridLayout_4.addComponent(label_10, 2, 0);
		gridLayout_4.setComponentAlignment(label_10, new Alignment(34));
		
		// cbCiudad
		cbCiudad = new ComboBox();
		cbCiudad.setImmediate(false);
		cbCiudad.setWidth("-1px");
		cbCiudad.setHeight("-1px");
		gridLayout_4.addComponent(cbCiudad, 3, 0);
		gridLayout_4.setComponentAlignment(cbCiudad, new Alignment(33));
		
		// label_11
		label_11 = new Label();
		label_11.setImmediate(false);
		label_11.setWidth("-1px");
		label_11.setHeight("-1px");
		label_11.setValue("Cantidad");
		gridLayout_4.addComponent(label_11, 4, 0);
		gridLayout_4.setComponentAlignment(label_11, new Alignment(34));
		
		// tfCantidad
		tfCantidad = new TextField();
		tfCantidad.setImmediate(false);
		tfCantidad.setWidth("-1px");
		tfCantidad.setHeight("-1px");
		gridLayout_4.addComponent(tfCantidad, 5, 0);
		
		// label_12
		label_12 = new Label();
		label_12.setImmediate(false);
		label_12.setWidth("-1px");
		label_12.setHeight("-1px");
		label_12.setValue("Orden");
		gridLayout_4.addComponent(label_12, 6, 0);
		gridLayout_4.setComponentAlignment(label_12, new Alignment(34));
		
		// tfOrden
		tfOrden = new TextField();
		tfOrden.setImmediate(false);
		tfOrden.setWidth("-1px");
		tfOrden.setHeight("-1px");
		gridLayout_4.addComponent(tfOrden, 7, 0);
		
		// label_13
		label_13 = new Label();
		label_13.setImmediate(false);
		label_13.setWidth("-1px");
		label_13.setHeight("-1px");
		label_13.setValue("Sigla");
		gridLayout_4.addComponent(label_13, 8, 0);
		gridLayout_4.setComponentAlignment(label_13, new Alignment(34));
		
		// tfSigla
		tfSigla = new TextField();
		tfSigla.setImmediate(false);
		tfSigla.setWidth("-1px");
		tfSigla.setHeight("-1px");
		gridLayout_4.addComponent(tfSigla, 9, 0);
		
		// horizontalLayout_2
		horizontalLayout_2 = buildHorizontalLayout_2();
		gridLayout_4.addComponent(horizontalLayout_2, 10, 0);
		
		return gridLayout_4;
	}

	@AutoGenerated
	private HorizontalLayout buildHorizontalLayout_2() {
		// common part: create layout
		horizontalLayout_2 = new HorizontalLayout();
		horizontalLayout_2.setImmediate(false);
		horizontalLayout_2.setWidth("-1px");
		horizontalLayout_2.setHeight("-1px");
		horizontalLayout_2.setMargin(false);
		
		// btnAgregar
		btnAgregar = new Button();
		btnAgregar.setImmediate(true);
		btnAgregar.setDescription("Agregar");
		btnAgregar.setWidth("-1px");
		btnAgregar.setHeight("-1px");
		horizontalLayout_2.addComponent(btnAgregar);
		
		return horizontalLayout_2;
	}

	@AutoGenerated
	private Panel buildPanel_4() {
		// common part: create layout
		panel_4 = new Panel();
		panel_4.setImmediate(false);
		panel_4.setWidth("100.0%");
		panel_4.setHeight("-1px");
		
		// verticalLayout_6
		verticalLayout_6 = buildVerticalLayout_6();
		panel_4.setContent(verticalLayout_6);
		
		return panel_4;
	}

	@AutoGenerated
	private VerticalLayout buildVerticalLayout_6() {
		// common part: create layout
		verticalLayout_6 = new VerticalLayout();
		verticalLayout_6.setImmediate(false);
		verticalLayout_6.setWidth("100.0%");
		verticalLayout_6.setHeight("-1px");
		verticalLayout_6.setMargin(false);
		
		// gridLayout_5
		gridLayout_5 = buildGridLayout_5();
		verticalLayout_6.addComponent(gridLayout_5);
		
		return verticalLayout_6;
	}

	@AutoGenerated
	private GridLayout buildGridLayout_5() {
		// common part: create layout
		gridLayout_5 = new GridLayout();
		gridLayout_5.setImmediate(false);
		gridLayout_5.setWidth("100.0%");
		gridLayout_5.setHeight("-1px");
		gridLayout_5.setMargin(false);
		gridLayout_5.setSpacing(true);
		gridLayout_5.setColumns(3);
		
		// taObservaciones
		taObservaciones = new TextArea();
		taObservaciones.setCaption("Observaciones");
		taObservaciones.setImmediate(false);
		taObservaciones.setWidth("100.0%");
		taObservaciones.setHeight("-1px");
		gridLayout_5.addComponent(taObservaciones, 0, 0);
		
		// panel_5
		panel_5 = buildPanel_5();
		gridLayout_5.addComponent(panel_5, 1, 0);
		
		// btnAutorizar
		btnAutorizar = new Button();
		btnAutorizar.setCaption("Autorizar");
		btnAutorizar.setImmediate(true);
		btnAutorizar.setWidth("-1px");
		btnAutorizar.setHeight("-1px");
		gridLayout_5.addComponent(btnAutorizar, 2, 0);
		gridLayout_5.setComponentAlignment(btnAutorizar, new Alignment(48));
		
		return gridLayout_5;
	}

	@AutoGenerated
	private Panel buildPanel_5() {
		// common part: create layout
		panel_5 = new Panel();
		panel_5.setCaption("Convenciones");
		panel_5.setImmediate(false);
		panel_5.setWidth("100.0%");
		panel_5.setHeight("-1px");
		
		// verticalLayout_7
		verticalLayout_7 = buildVerticalLayout_7();
		panel_5.setContent(verticalLayout_7);
		
		return panel_5;
	}

	@AutoGenerated
	private VerticalLayout buildVerticalLayout_7() {
		// common part: create layout
		verticalLayout_7 = new VerticalLayout();
		verticalLayout_7.setImmediate(false);
		verticalLayout_7.setWidth("100.0%");
		verticalLayout_7.setHeight("100.0%");
		verticalLayout_7.setMargin(false);
		
		// gridLayout_3
		gridLayout_3 = buildGridLayout_3();
		verticalLayout_7.addComponent(gridLayout_3);
		verticalLayout_7.setExpandRatio(gridLayout_3, 1.0f);
		
		return verticalLayout_7;
	}

	@AutoGenerated
	private GridLayout buildGridLayout_3() {
		// common part: create layout
		gridLayout_3 = new GridLayout();
		gridLayout_3.setImmediate(false);
		gridLayout_3.setWidth("100.0%");
		gridLayout_3.setHeight("100.0%");
		gridLayout_3.setMargin(false);
		gridLayout_3.setColumns(2);
		gridLayout_3.setRows(5);
		
		// btnPendiente
		btnPendiente = new Button();
		btnPendiente.setCaption("P");
		btnPendiente.setImmediate(true);
		btnPendiente.setWidth("-1px");
		btnPendiente.setHeight("-1px");
		gridLayout_3.addComponent(btnPendiente, 0, 0);
		gridLayout_3.setComponentAlignment(btnPendiente, new Alignment(48));
		
		// label_7
		label_7 = new Label();
		label_7.setImmediate(false);
		label_7.setWidth("-1px");
		label_7.setHeight("-1px");
		label_7.setValue("PENDIENTE");
		gridLayout_3.addComponent(label_7, 1, 0);
		gridLayout_3.setComponentAlignment(label_7, new Alignment(33));
		
		// btnAutorizado
		btnAutorizado = new Button();
		btnAutorizado.setCaption("A");
		btnAutorizado.setImmediate(true);
		btnAutorizado.setWidth("-1px");
		btnAutorizado.setHeight("-1px");
		gridLayout_3.addComponent(btnAutorizado, 0, 1);
		gridLayout_3.setComponentAlignment(btnAutorizado, new Alignment(48));
		
		// label_15
		label_15 = new Label();
		label_15.setImmediate(false);
		label_15.setWidth("-1px");
		label_15.setHeight("-1px");
		label_15.setValue("AUTORIZADO");
		gridLayout_3.addComponent(label_15, 1, 1);
		gridLayout_3.setComponentAlignment(label_15, new Alignment(33));
		
		// btnTransito
		btnTransito = new Button();
		btnTransito.setCaption("T");
		btnTransito.setImmediate(true);
		btnTransito.setWidth("-1px");
		btnTransito.setHeight("-1px");
		gridLayout_3.addComponent(btnTransito, 0, 2);
		gridLayout_3.setComponentAlignment(btnTransito, new Alignment(48));
		
		// label_14
		label_14 = new Label();
		label_14.setImmediate(false);
		label_14.setWidth("-1px");
		label_14.setHeight("20px");
		label_14.setValue("TRANSITO");
		gridLayout_3.addComponent(label_14, 1, 2);
		gridLayout_3.setComponentAlignment(label_14, new Alignment(33));
		
		// btnDisponible
		btnDisponible = new Button();
		btnDisponible.setCaption("D");
		btnDisponible.setImmediate(true);
		btnDisponible.setWidth("-1px");
		btnDisponible.setHeight("-1px");
		gridLayout_3.addComponent(btnDisponible, 0, 3);
		gridLayout_3.setComponentAlignment(btnDisponible, new Alignment(48));
		
		// label_8
		label_8 = new Label();
		label_8.setImmediate(false);
		label_8.setWidth("-1px");
		label_8.setHeight("-1px");
		label_8.setValue("DISPONIBLE");
		gridLayout_3.addComponent(label_8, 1, 3);
		gridLayout_3.setComponentAlignment(label_8, new Alignment(33));
		
		// btnNoEncontro
		btnNoEncontro = new Button();
		btnNoEncontro.setCaption("N");
		btnNoEncontro.setImmediate(true);
		btnNoEncontro.setWidth("-1px");
		btnNoEncontro.setHeight("-1px");
		gridLayout_3.addComponent(btnNoEncontro, 0, 4);
		gridLayout_3.setComponentAlignment(btnNoEncontro, new Alignment(48));
		
		// label_17
		label_17 = new Label();
		label_17.setImmediate(false);
		label_17.setWidth("-1px");
		label_17.setHeight("-1px");
		label_17.setValue("NO ENCONTRADA");
		gridLayout_3.addComponent(label_17, 1, 4);
		
		return gridLayout_3;
	}

}
